/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views;

import enums.Enums.SelectFor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import javax.swing.SwingWorker;
import javax.swing.Timer;
import models.Generation;
import models.Genome;

/**
 *
 * @author kevinwhiteside
 */
public class GameWindow extends javax.swing.JFrame
{

    public ArrayList<Genome> GenomeList;
    public Generation Generation;
    private int speed = 50;
    private Timer timer;

    /**
     * Creates new form GameForm
     */
    public GameWindow()
    {
        GenomeList = new ArrayList<>();
        Generation = new Generation(GenomeList, 0.45f, 0.001f);
        initComponents();
        setLocationRelativeTo(null);
        
        // TODO add your handling code here:
        timer = new Timer(speed, new ActionListener()
            {
                @Override
                public void actionPerformed(ActionEvent e)
                {
                    int rows = (int) rowSpinner.getValue();
                    int cols = (int) colSpinner.getValue();

                    Generation.Advance(GenomeList);
                    gridPanel.updateCells(rows, cols, GenomeList);
                    
                    float AvgFitness = Generation.TotalFitness / (float)GenomeList.size();
                    fitnessLbl.setText(String.valueOf(AvgFitness*100) + "%");
                }

            });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        updateGridBtn = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        rowSpinner = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        colSpinner = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        crossoverSlider = new javax.swing.JSlider();
        crossoverRateLbl = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        mutationRateLbl = new javax.swing.JLabel();
        mutationSlider = new javax.swing.JSlider();
        jLabel8 = new javax.swing.JLabel();
        runToggleBtn = new javax.swing.JToggleButton();
        redCheckBox = new javax.swing.JCheckBox();
        greenCheckBox = new javax.swing.JCheckBox();
        blueCheckBox = new javax.swing.JCheckBox();
        jPanel2 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        chromoCountLabel = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        fitnessLbl = new javax.swing.JLabel();
        gridPanel = new GridPanel(GenomeList);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Genetic Coloration");
        setResizable(false);

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder(java.awt.Color.gray, java.awt.Color.lightGray));

        updateGridBtn.setText("Update Grid");
        updateGridBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                updateGridBtnActionPerformed(evt);
            }
        });

        jLabel1.setText("Rows:");

        rowSpinner.setModel(new javax.swing.SpinnerNumberModel(10, 1, 50, 1));

        jLabel2.setText("Columns:");

        colSpinner.setModel(new javax.swing.SpinnerNumberModel(10, 1, 50, 1));

        jLabel4.setText("Crossover Rate:");

        crossoverSlider.setMajorTickSpacing(10);
        crossoverSlider.setMinorTickSpacing(5);
        crossoverSlider.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                crossoverSliderStateChanged(evt);
            }
        });

        crossoverRateLbl.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        crossoverRateLbl.setText("50%");

        jLabel6.setText("Mutation Rate:");

        mutationRateLbl.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);
        mutationRateLbl.setText("0.1%");

        mutationSlider.setMajorTickSpacing(5);
        mutationSlider.setMaximum(20);
        mutationSlider.setMinimum(1);
        mutationSlider.setMinorTickSpacing(1);
        mutationSlider.setValue(10);
        mutationSlider.addChangeListener(new javax.swing.event.ChangeListener()
        {
            public void stateChanged(javax.swing.event.ChangeEvent evt)
            {
                mutationSliderStateChanged(evt);
            }
        });

        jLabel8.setText("Solve For:");

        runToggleBtn.setText("Run Algorithm");
        runToggleBtn.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                runToggleBtnActionPerformed(evt);
            }
        });

        redCheckBox.setText("Red");
        redCheckBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                redCheckBoxActionPerformed(evt);
            }
        });

        greenCheckBox.setText("Green");
        greenCheckBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                greenCheckBoxActionPerformed(evt);
            }
        });

        blueCheckBox.setText("Blue");
        blueCheckBox.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                blueCheckBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mutationSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(crossoverSlider, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(updateGridBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(crossoverRateLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(runToggleBtn, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(mutationRateLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(redCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(rowSpinner)
                                    .addComponent(colSpinner)
                                    .addComponent(greenCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(blueCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rowSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(colSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(updateGridBtn)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(crossoverRateLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(crossoverSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(mutationRateLbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(mutationSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(redCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(greenCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(blueCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(runToggleBtn)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel3.setText("Chromosomes:");

        chromoCountLabel.setText("100");

        jLabel5.setText("Overall Fitness:");

        fitnessLbl.setText("100.00%");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(chromoCountLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(fitnessLbl)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(chromoCountLabel)
                    .addComponent(jLabel5)
                    .addComponent(fitnessLbl))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        gridPanel.setMaximumSize(new java.awt.Dimension(428, 428));
        gridPanel.setMinimumSize(new java.awt.Dimension(428, 428));
        gridPanel.setPreferredSize(new java.awt.Dimension(428, 428));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(gridPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(gridPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 428, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void updateGridBtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_updateGridBtnActionPerformed
    {//GEN-HEADEREND:event_updateGridBtnActionPerformed
        // TODO add your handling code here:
        int newRows = (int) rowSpinner.getValue();
        int newCols = (int) colSpinner.getValue();
        gridPanel.resetCells(newRows, newCols, GenomeList);
        chromoCountLabel.setText(String.valueOf(GenomeList.size()));
    }//GEN-LAST:event_updateGridBtnActionPerformed

    private void crossoverSliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_crossoverSliderStateChanged
    {//GEN-HEADEREND:event_crossoverSliderStateChanged
        // TODO add your handling code here:
        Generation.CrossoverRate = (float) crossoverSlider.getValue() / 100.0f;
        crossoverRateLbl.setText(String.valueOf((int) crossoverSlider.getValue()) + "%");
    }//GEN-LAST:event_crossoverSliderStateChanged

    private void mutationSliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_mutationSliderStateChanged
    {//GEN-HEADEREND:event_mutationSliderStateChanged
        // TODO add your handling code here:
        Generation.MutationRate = (float) mutationSlider.getValue() / 10000.0f;
        mutationRateLbl.setText(String.valueOf((float) mutationSlider.getValue() / 100) + "%");
    }//GEN-LAST:event_mutationSliderStateChanged

    private void runToggleBtnActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_runToggleBtnActionPerformed
    {//GEN-HEADEREND:event_runToggleBtnActionPerformed
        if (runToggleBtn.isSelected())
        {
            timer.start();
        }
        else
        {
            timer.stop();
        }
    }//GEN-LAST:event_runToggleBtnActionPerformed

    private void redCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_redCheckBoxActionPerformed
    {//GEN-HEADEREND:event_redCheckBoxActionPerformed
        // TODO add your handling code here:
        Generation.SelectForRed = redCheckBox.isSelected();
    }//GEN-LAST:event_redCheckBoxActionPerformed

    private void greenCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_greenCheckBoxActionPerformed
    {//GEN-HEADEREND:event_greenCheckBoxActionPerformed
        // TODO add your handling code here:
        Generation.SelectForGreen = greenCheckBox.isSelected();
    }//GEN-LAST:event_greenCheckBoxActionPerformed

    private void blueCheckBoxActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_blueCheckBoxActionPerformed
    {//GEN-HEADEREND:event_blueCheckBoxActionPerformed
        // TODO add your handling code here:
        Generation.SelectForBlue = blueCheckBox.isSelected();
    }//GEN-LAST:event_blueCheckBoxActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox blueCheckBox;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JLabel chromoCountLabel;
    private javax.swing.JSpinner colSpinner;
    private javax.swing.JLabel crossoverRateLbl;
    private javax.swing.JSlider crossoverSlider;
    private javax.swing.JLabel fitnessLbl;
    private javax.swing.JCheckBox greenCheckBox;
    private views.GridPanel gridPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel mutationRateLbl;
    private javax.swing.JSlider mutationSlider;
    private javax.swing.JCheckBox redCheckBox;
    private javax.swing.JSpinner rowSpinner;
    private javax.swing.JToggleButton runToggleBtn;
    private javax.swing.JButton updateGridBtn;
    // End of variables declaration//GEN-END:variables
}
